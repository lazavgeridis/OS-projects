DOCUMENTATION



Αρχικά καλείται η διαδικασία root(initial) η οποία αρχικά κάνει έλεγχο των ορισμάτων και στη συνέχεια κάνει setup τον signal handler που έχω ορίσει. Μετά απο αυτά ξεκινάει τον timer. Στη συνέχεια, δημιουργεί ένα named pipe για την επικοινωνία με το παιδί της(sm0) και δημιουργεί έναν νέο argument array το οποίο θα περάσει στο παιδί της. Κάνει fork ένα παιδί, το οποίο θα τρέξει το 1o splitter/merger executable με το argument array που αναφέρθηκε παραπάνω. Η root ανοίγει το pipe της για να διαβάσει τα records που θα της στείλει η sm0, τα οποία στη συνέχεια θα τα γράψει σε ένα αρχείο που θα δοθεί ως input στην sort(). Οι διαδικασίες splitter/merger πρώτα τροποποιούν το argument array που τους δόθηκε και στη συνέχεια το περνούν ως όρισμα στα παιδιά τους είτε αυτά είναι splitter/merger, ή searchers. Στη συνέχεια, ανοίγουν τα pipe των παιδιών τους και αντλούν τα records που αυτά τους έχουν στείλει και οι sm γονείς με τη σειρά τους τα περνούν πιο πάνω στην ιεραρχία. Οι διεργασίες searchers είναι αυτές που εκτελούν την αναζήτηση στο δυαδικό αρχείο εγγραφών. Ανάλογα με το αν είχε δοθεί το flag -s οι searchers κάνουν αναζήτηση σε ίσα τμήματα του αρχείου, ή αν δεν είχε δοθεί το flag -s οι εγγραφές που αναλαμβάνουν δίνεται από τον τύπο της εκφώνησης. Εδώ εμφανίζεται συχνά το φαινόμενο κάποιες εγγραφές να μην αναλαμβάνονται από κάποιον searcher, αλλά το πρόβλημα λύνεται εύκολα αν βάλουμε τον τελευταίο searcher να ψάξει τις εγρραφές που μένουν. Λίγο πριν τελειώσει ο searcher θα στείλει στον sm γονιό του μια τελευταία εγγραφή που ξεκινάει με Τ, η οποία συμβολίζει μία εγγραφή που περιέχει στατιστικά χρόνου για τον κόμβο. Τέτοιες εγγραφές αλλά διαφοροποιημένες όσο ανεβαίνουμε την ιεραρχία στέλνουν και οι sm διεργασίες στους γονιούς τους, έτσι ώστε όταν θα φτάσει τελικά μια τέτοια εγγραφή στη root, αυτή να μπορεί να καταλάβει ποιος χρόνος αντιστοιχεί σε ποια μορφή διεργασίας. Επίσης οι searchers όταν τελειώσουν τη λειτουργία τους στέλνουν και ένα σήμα στη root SIGUSR2 μέσω της εντολής kill. 
